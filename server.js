var express = require('express');
var app = express();
var multer = require('multer')
var cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const pdf = require('pdf-parse');
const path = require('path');
var mongoose = require('mongoose');
app.use(cors())
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use('/my-virtual-directory',express.static(__dirname + '/public'));





//Database connection
//For resolving unexpected warning generated by Mongoose
mongoose.set('useUnifiedTopology', true);
mongoose.set('useNewUrlParser', true);
mongoose.connect('mongodb+srv://webdevrootlamda:webdevrootlamda12345@cluster0.fweuu.mongodb.net/webdevroot?retryWrites=true&w=majority', { useNewUrlParser: true })
    .then(() => {
        console.log("Successful Mongodb connection...");
    })
    .catch(err => {
        console.log("Unable to connect..")
    })

// declaring schema
const recordsSchema = new mongoose.Schema({
    userDetail: { type: String, required: true},
    fileInfo: { type: Object, required: true},
    firstPage : {type : String, required:true},
    date: { type: Date, default: Date.now}
});

var RecordModel = mongoose.model('pdfrecord', recordsSchema);
 

//For File uploading
var storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'public')
    },
    filename: function (req, file, cb) {
      cb(null, Date.now() + '-' +file.originalname )
    }
})
  
var upload = multer({ storage: storage }).array('file')


// default render callback
function render_page(pageData) {
  return pageData.getTextContent().then(function(textContent) 
  {
      let lastY, text = '';
      for (let item of textContent.items) {
          if (lastY == item.transform[5] || !lastY){
              text += item.str;
          }  
          else{
              text += '\n' + item.str;
          }    
          lastY = item.transform[5];
      }
      return text;
  });
}



app.get('/',function(req,res){
    return res.send('Backend is up and running')
})


app.post('/upload',function(req, res) {    
    upload(req, res, async function (err) {
        if (err instanceof multer.MulterError) {
            return res.status(500).json(err)
          // A Multer error occurred when uploading.
        } else if (err) {
            return res.status(500).json(err)
          // An unknown error occurred when uploading.
        } 
        else
        {

          //This block will execute only after file storing succesfull process 
          try
          {
            var fileLocation = req.files[0].path;
            //reading first page of PDF
            let options = {
                pagerender: render_page,
                max : 1
            }
    
            let dataBuffer = fs.readFileSync(path.join(__dirname, '/'+fileLocation));
            var data = await pdf(dataBuffer,options);
            //console.log(data.text)
            const bodyData = {
                userDetail : req.body.userdetails,
                fileInfo : req.files[0],
                firstPage : data.text
            }
            const recordSave = new RecordModel(bodyData);
            const save = await recordSave.save();
            res.status(200).send({
                "status": "New record created",
                "statusCode" : 200,
                "recordDetails": save
            });
          }
          catch(e)
          {
            res.status(200).send({
                "status": "fail",
                "recordDetails": e,
                "statusCode" : 403
            });
          }
        }
        
        
        // Everything went fine.
      })
});


app.get('/get-record',async function(req,res)
{

        var getRecord = await RecordModel.find();
        //reading all records with first page preview
        if (getRecord)
        {
            return res.status(200).send({
                "status": "sucess",
                "statusCode": 200,
                "result": getRecord
            });
        
        }

});

app.post('/get-record-file-name',async function(req,res)
{
  try
  {  
    let queryString = req.body.filename;
    var getRecord = await RecordModel.findOne({"fileInfo.originalname" : queryString});
        if (getRecord) {
        return res.status(200).send({
            "status": "sucess",
            "statusCode": 200,
            "result": getRecord
        });
        }
        else
        {
        return res.status(200).send({
            "status": "sucess",
            "statusCode": 404,
            "result": "No search record found"
        });     
        }
    }
    catch(e)
    {
        return res.status(200).send({
            "status" : "Unexpected error. Please try again",
            "status" : 403,
            "result" : e
        });
    }
    
  
});


app.post('/get-record-file-inner-text',async function(req,res)
{
    try
    {
        var searchString = req.body.searchString;
        var getRecord = await RecordModel.find();
        if (getRecord)
        {
        var customResult = [];
        for(var i=0;i<getRecord.length;i++)
        {
            var fileLocation = getRecord[i].fileInfo.path;
            let options = {
            pagerender: render_page,
            max : 0
            }

            let dataBuffer = fs.readFileSync(path.join(__dirname, '/'+fileLocation));
            
            var data = await pdf(dataBuffer,options);
            if(data.text.search(searchString) !== -1)
            {
            //console.log(data.text)    
            //console.log(data.text.search(searchString))  
            getRecord[i].firstPage = data.text;
            customResult.push(getRecord[i]);  
            }
            

        }
        return res.status(200).send({
            "status": "sucess",
            "statusCode": 200,
            "result": customResult
        });
        
        }
        else
        {
            return res.status(200).send({
                "status": "sucess",
                "statusCode": 200,
                "result": []
            });
            
        }
    }
    catch(e)
    {
        return res.status(200).send({
            "status": "sucess",
            "statusCode": 200,
            "result": []
        });
    }
  
});


app.delete('/delete-record-by-id',async function(req,res){
    try
    {
        var data = await RecordModel.deleteOne({"_id" : req.body.id});
        if(data){
            fs.unlinkSync(req.body.path)
        }
        return res.status(200).send({
            "status" : "This result is not in db any more.",
            "status" : 203,
            "result" : data
        });
    }
    catch(e)
    {
        return res.status(200).send({
            "status" : "Unexpected error",
            "status" : 403,
            "result" : e
        });
    }
});


app.listen(8000, function() {
    console.log('App running on port 8000');
});